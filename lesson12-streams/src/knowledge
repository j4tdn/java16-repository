Runnable -> void run()
Callable -> void call()
Predicate -> boolean test(T t)
Consumer -> void accept(T t)
lambda expression: Cách ngắn gọn để tạo ra 1 thể hiện cho Functional Interface
method reference: Cách ngắn gọn hơn cả lambda expression để tạo ra 1 thể hiện cho Functional Interface
Functional Inteface -> L

#JAVA 15===========================================
Predicate<T>  
	T->boolean

Consumer<T>
	T->void
	
Function<T, R>
	T -> R
	
Supplier<T>
	() -> T
	
UnaryOperator<T>
	T -> T
	
BinaryOperator<T>
	(T, T) -> T
	
BiPredicate<L, R>
	<L, R> -> boolean
	
BiConsumer<T, U>
	(T, U) -> void
	
BiFunction<T, U, R>
	(T, U) -> R


STREAM
Stream is "a sequence of elements from a source that supports data processing operation"
	
Collections are about data
Streams ara about computations -> Chi duyet 1 lan roi chuyen sang Collection sau

Stream is a fixed data structure

Không thể lưu lại stream thành 1 biến để forEach,... lại giống như Collection

Stream: Internal Iteration
Collection: External Iteration

Stream operations: 2 loai
	+ Intermediate operations: 
		-> return another stream as the return type.
		-> Don't perform any processing until a terminal operation is invoked.
	+ Terminal operation: 
		-> produce a result from a stream pipeline.
		-> Result: non-stream value: List, Integer, or even void
			(collect || count || forEach)
	
Working with Streams:
	-involves 3 items:
		+ data source
		+ chain of intermediate operations --> form a stream pipeline
		+ terminal operation --> executes the stream pipeline and produces a resultambda Expression -> Method Reference
		
flatMap():
	- The flatMap() operation has the effect of applying a one-to-many transformation to the
elements of the stream, and then flattening the resulting elements into a new stream.
	flatMap() = map() + Flattening
	
	Flat:  Flattening is referred by converting several lists of lists, and merge all those lists to create single
list containing all the elements from all the lists.
	-> BEFORE: [[1,2],[3,4],[5,6,7]]
	-> AFTER: [1,2,3,4,5,6,7]
	
	- flatMap() là 1 intermediate function và sẽ return về 1 stream khác
	- stream trả về sẽ bao gồm 1 stream chứa toàn bộ stream trả về sau khi áp dụng
	mapping đó với từng phần tử bên trong List<List<Object>> ban đầu
	
Có sự khác nhau giữa Arrays::stream và Collection::stream
VD: Collection::stream :
	List<List<Integer>> listOfLists = Arrays.asList(...);
	List<Integer> listOfAllIntegers = listOfList.stream().flatMap(list->list.stream()).collect(Collectors.toList()); 
	
	Arrays::stream :
	String[][] dataArray = new String[][]{...};
	String[] arrayOfAllString = Arrays.stream(dataArray).flatMap(arrayString->Arrays.stream(arrayString)).toArray(String[]::new);
	
	Hoặc convert từ Arrays sang Collection (Có thể áp dụng ngược lại):
	String[][] dataArray = new String[][]{...};	
	List<String> listOfAllString = Arrays.stream().flatMap(array->Arrays.stream(array)).collect(Collectors.toList());
	
Finding and Matching: 
	+ allMatch: return boolean
	+ anyMatch: return boolean
	+ noneMatch: return boolean
	+ findFirst: return Optional<T> with 1 / empty element
	+ findAny: return Optional<T> with n / empty element
	
Optional<T> được trả về để đề phòng khi findFirst hoặc findAny không tìm được element nào thì nó sẽ không trả về null khiến dễ gây exception
	- Các hàm tương tác với Optional<T>:
		+ isPresent(): return boolean
		+ ifPresent(Consumer<T> block):	đưa vào các phần tử nếu k empty để thực thi VD như println
		+ T get(): lại get về 1 Optional<U> khác nếu có sử dụng map, filter,.... Nếu null trả về NoSuchElementException.
		+ T orElse(T other): trả về T nếu isPresent == true, nếu không trả về other
		+ T orElseGet(Supplier<? extends T> other): Optional.orElseGet(() -> getRandomName());
		+ T orElseThrow(Supplier<? extends T> exceptionSupplier): Optional.orElseThrow(ABCexception::new)
		+ of(): VD: Optional<Integer> op = Optional.of(9455); nếu null thì sẽ trả về exception
		+ ofNullable(): tương tự of() tuy nhiên null thì sẽ trả về Optinal.empty;
		+ ~stream: filter(), flatMap(), map()
		+ Object bth: constructor, hashCode(), toString()

Reducing
	T reduce(T identity, BinaryOperator<T> accumulator)
		+ identity: khi stream rỗng thì sẽ trả về identity
		+ accumulator: nhận vào 2 tham số -> thao tác với 2 tham số
		
	Có thể sử dụng method reference để tìm min, max,...
	numbers.stream().reduce(Integer::max)	
	numbers.stream().reduce(Integer::min)
	
Stream operation
	+Stateless: filter, map, flatMap, match, find, collect, count	
	+Stateful: distinct, skip, limit, sorted, reduce 
	A stateful operation is the one whose result depends on any state that might change during the execution of the pipeline. Stateless operations retain no state during the execution of the pipeline.
	
	Tức là stateful thì các element phải có 1 internal state để accumulate đối với những phần tử đã duyệt qua
	Còn stateless thì khi duyệt đến element nào thì chỉ quan tâm đến element đó thôi
	
Numeric Stream 
	VD: int calories = menu.stream().map(Dish::getCalories).reduce(0, Integer::sum);
	Thì sẽ phải tốn 1 chi phí lớn cho việc unboxing nếu lượng dữ liệu lớn.
	
	Vì vậy numeric ra đời để chuyển stream Integer thành stream int với kiểu dữ liệu nguyên thuỷ để giảm bớt lượng chi phí nêu trên
	3 Primitive Steam: IntStream, DoubleStream, LongStream
	Convert giữa các loại stream: 
	IntStream intStream = menu.stream().mapToInt(Dish::getCalories).sum();
	Stream<Integer> calories = intStream.boxed();
	
Numeric Ranges
	Có thể khởi tạo 1 primitive stream với các phần tử ở trong 1 khoảng
	VD: Khởi tạo stream có chứa toàn bộ số chẵn từ 1 -> 100
	IntStream evenNumbers = IntStream.rangeClosed(1, 100).filter(n->b%2==0);
Arithmetic Operation ...
Building Stream
	lưu ý array (VD: int[] a) thì a không có phương thức nên để khởi tạo stream cho a thì sử dụng Arrays.stream(a)
	Cỏn list vì khởi tạo List<Integer> a sẵn nên có thể a.stream() để khởi tạo stream

Stream.iterate và Stream.generate
	iterate sẽ cần 1 seed (phần tử cuối cùng / phần tử seed trong tham số truyền vào) để khởi tạo phần tử tiếp theo cho nó (UnaryOperator)
	generate sẽ khởi tạo phần tử mà không cần phải đưa vào bất cứ gì cả (Supplier)
	+ iterate(int seed, IntUnaryOperator f)
 	+ generate(IntSupplier s)
	

