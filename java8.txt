Functional interface là interface có duy nhất 1 abstract method, có thể không có hoặc có nhiều default/static method.
LESSON 12 - Coping with changing requirement - Lambda expression & Method-
- trong java không thể truyền vào 1 function => truyền vào 1 biến kiểu dữ liêu đối tương(1 interface) và có hàm trừu tương bên trong
- Lamda: giúp tao ra đối tương của functional interface (slide) => giúp code better hơn =>  chỉ tao ra đối tương f.interface vì lamda provide the implementation of abstract method of functional interface. vì interface bình thương có nhiều hàm trừi tương =>  1 đoan code k thể overrid nhiều hàm.
- Không có lamda vẫn làm đc tao lớp thưc thi or anonymus classs
- sử dung tao ra đối tương của funtional interface dưa vào hàm trừu tương có dang gì override lai


2. Lamda expression
-  * Constructor Reference là cách viết ngắn gon để tao ra 1 đối tương/ thể hiên giá tri cho functional interface
 * --> tương tư method reference
 * 
 * method reference (...) -> method
 * Constructor Reference : (...) -> constructor
 * --> Functional interface nào có hàm trừu tương(strategy method) có dang T method_name(..): có hoăc k có tham số-
 * ---> có thể dùm lamda || constructor reference để tao ra đối tương

3. collection đai diên vừa list vừa set
Functional interface là gì:
	+ Là 1 interface chứa duy nhất 1 hàm trừu tượng
	VD: Supplier<T>
	+ Developer có thể tự tạo ra custom functional interface
	
2. Khi nào sử dụng Functional Interface
	+ Khi mình muốn hàm/chức năng là 1 tham số ở hàm khác
	+ --> Sử dụng strategy pattern
	+ strategy pattern --> strategy method
	+ strategy method --> input, output
	
	Interface 
		+ strategy_method
	return_type_method_name(Interface interface) {
		... interface.strategy_method(...)
	}
	
	+ Gọi method_name
	
	+ anonymous class -> đoạn code giúp mình tạo ra một đối tượng cho biến dữ liệu
	kiểu interface
	
	+ anonymous class(dài) --> anonymous function(lambda expression)
	
	
	+lamda: (parameters) --> {} ---> override abstract method() in functional interface
	Tao đối tương cho functional interface

3. Stream
- cấu trúc dữ liêu cho phép khia báo , lưu trữ dữ liêu. Hỗ trơ cái powerful function. 
- why we dont store data in stream? VÌ STREAM CHỈ ĐƯỢC THAO TÁC XỬ LÝ TRUY CẬP 1 LẦN(TRAVERSABLE ONCE) còn lưu trong mảng, list,,, thì xử lý đc nhiều lần
-=>  stream tập hợp tất cả các phần tử từ cái source  -> hỗ trợ tập hợp thao tác dữ liệu
Giông collection cung tập interface tập hợp các giá trị của nó. tập trung tính toán mạnh hơn (computations)
- 3 phầnchính trong stream:
 + data source : nguồn đâu vào để, dữ liệu để chuyern sang stream
 + a chain of intermediate operation: that form a stram pipeline:  thao tác trung gian(map, filter, ,,,)
 + a terminal operation: that executes the stram pipeline and produces a resul: collect, foreach,...
Collection tập trung manh ở cấu trúc dữ liệu data structure mạnh hơn
4.
findAny() findFirst  //khoong truyeen -> optional
allMatch, nonMatch //truyenf dk(predicate) --> boolean
5. int[] -> IntStream
double[] -> DoubleStream
Integer[] -> Stream<Integer>
String[] -> Stream<String>
List<T>.stream() -> Stream<T>
Set<T>.stream() -> Stream<T>
Map<K,V>.entrySet() --> Set<Entry<K,V>>.stream--> Stream<Entry<K,v>>

...intermediate operations ...
...terminal operation... --> #stream























