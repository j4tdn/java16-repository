class là một khái niệm trừu tượng 

==== Từ version JAVA07 trờ về trước

1. tính chất đóng gói là gì
--> tính chất đóng gói thể hiện qua các access modfier 
+private: Class
+pulic: Project(mọi nơi)
+default & protected: Package
protected: có thể dùng bên ngoiaf package với class con(class con của class dùng access modifier là protected) 

--> áp dụng ở đâu trong code
-->public: tạo ra các hàm utilities sử dụng ở bất kỳ nơi nào
-->default: clearUI --> sử dụng tring package view(code giao diện)

tính chất đa hình
+phương thức: 1 phương thức(sum, sub) nhưng có nhiều thể hiện,chức năng,trạng thái
-->Overload: Hai hoặc nhiều phương thức gọi là overloading nếu
	+ cùng 1 class
	+ cùng tên
	+ khác nhau số lượng tham số || kiểu dữ liệu truyền vào của tham số
	
-->Overide: Hai hoặc nhiều phương thức gọi là overriding nếu 
	+ Thuộc 2 hoặc nhiều class có quan hệ thừa kế
	+ override để định nghĩa lại nội dung trong class con
	vd: toString  
	
+ ĐỐi tượng: 1 đối tượng nhưng có nhiều thể hiện 
--> Ví dụ: Person --> Student.Employee,Child
--> Mục Đíc: tạo ra 1 tập các đối tượng lưu chung 1 mảng, danh sách
		   : Dễ dàng convert KDL trong phạm vi cha con
		   
3. Kế Thừa
m/đích: Tăng khả năng reuse code
KDL Cha: class,abstract class, interface
KDL Con: class,abstract class, interface

class extends {class,abstract class}
abstract class extends {abstract class}
			   implements interface
interface extends interface

---> Phân biệt abstract class và interface
+Abstract  class: Chứa hàm trừu tượng và hàm bình thường
	chỉ extends được từ duy nhất một class
+Interface: chỉ chứa hàm trừu tượng
	có thẻ implements từ nhiều interface
	
==== Từ version 08 trở về trước

+ Interface: Chứa hàm trừu tượng và hàm bình thường

+vì sao từ JAVA08 hỗ trợ non-abstract methods trong interface
+mục đích và khác gì giữa abstract class và interface