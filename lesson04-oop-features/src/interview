====== TỪ VERSION JAVA07 TRỞ VỀ TRƯỚC ======

1. Tính chất đóng gói là gì. Áp dụng ở đâu trong code ?
--> Tính chất đóng gói được thể hiện qua các access modifier
+ Private: Class
+ Public: Anywhere
+ Default & Protected: Package
+ Protected: Can be used in different package with sub classes

*******Áp dụng********
--> Public: tạo ra các hàm utilities sử dụng bất kỳ nơi nào
--> Default: clearUI --> Sử dụng trong package view(code giao diện)

2.Tính chất đa hình
+ Phương thức: 1 phương thức(sum, sub) nhưng có nhiều thể hiện, chức năng
--> Overload: 2 hoặc nhiều phương thức gọi là overloading nếu
	+ Cùng 1 class
	+ Trùng tên
	+ Khác nhau số lượng tham số || kiểu dữ liệu truyền vào của tham số
	
--> Override: 2 hoặc nhiều phương thức gọi là overriding nếu
	+ Thuộc 2 hoặc nhiều class có quan hệ thừa kế
	+ Override để đinh nghĩa lại nội dung trong Class con
	+ Ví dụ: hàm toString
	
	
+ Đối tượng: là một đối tượng nhưng có nhiều thể hiện
--> Ví dụ: Person --> Student, Employee, Child
--> Mục đích: Tạo ra 1 tập các đối tượng lưu chung 1 mảng, danh sách
			: Dễ dàng convert KDL trong phạm vi cha con
			
3. Kế thừa
+ Mục đích: tăng khả năng reuse code
KDL cha: Class, Abstract Class, Interface
KDL con: Class, Abstract Class, Interface

Class extends Class, Abstract Class
Class implement Interface

Abstract Class extends Abstract Class
Abstract Class implements Interface

Interface extends Interface

??? Phân biệt Abstract Class và Interface
+ Abstract class: chứa được hàm trừu tượng và hàm bình thường
 Chỉ extend được duy nhất 1 class, abstract class - single extend
 
+ Interface: Chỉ chứa hàm trừu tượng
	Có thể implement từ nhiều interface - multiple implements
	
===== TỪ VERSION JAVA08 TRỞ VỀ SAU =====
+ Interface: chứa hàm trừu tượng và hàm bình thường
			 Có thể implement từ nhiều interface
			 
+ Vì sao từ JAVA08 Java hỗ trợ non-abstract method trong interface
+ Mục đích khác gì giữa abstract class và interface

